
day7_assm2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08000954  08000954  00001954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a84  08000a84  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000a84  08000a84  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a84  08000a84  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a84  08000a84  00001a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a88  08000a88  00001a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000a8c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000002c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001dba  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000079e  00000000  00000000  00003dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00004590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dd  00000000  00000000  000046d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001848b  00000000  00000000  000047b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c2b  00000000  00000000  0001cc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bfd5  00000000  00000000  0001e86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa840  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000370  00000000  00000000  000aa884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000aabf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005e  00000000  00000000  000aac13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800093c 	.word	0x0800093c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800093c 	.word	0x0800093c

080001c8 <LedInit>:
 */

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80001d0:	4b29      	ldr	r3, [pc, #164]	@ (8000278 <LedInit+0xb0>)
 80001d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d4:	4a28      	ldr	r2, [pc, #160]	@ (8000278 <LedInit+0xb0>)
 80001d6:	f043 0308 	orr.w	r3, r3, #8
 80001da:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 80001dc:	4b27      	ldr	r3, [pc, #156]	@ (800027c <LedInit+0xb4>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	0052      	lsls	r2, r2, #1
 80001e4:	3201      	adds	r2, #1
 80001e6:	2101      	movs	r1, #1
 80001e8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ec:	43d2      	mvns	r2, r2
 80001ee:	4611      	mov	r1, r2
 80001f0:	4a22      	ldr	r2, [pc, #136]	@ (800027c <LedInit+0xb4>)
 80001f2:	400b      	ands	r3, r1
 80001f4:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 80001f6:	4b21      	ldr	r3, [pc, #132]	@ (800027c <LedInit+0xb4>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	0052      	lsls	r2, r2, #1
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f202 	lsl.w	r2, r1, r2
 8000204:	4611      	mov	r1, r2
 8000206:	4a1d      	ldr	r2, [pc, #116]	@ (800027c <LedInit+0xb4>)
 8000208:	430b      	orrs	r3, r1
 800020a:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800020c:	4b1b      	ldr	r3, [pc, #108]	@ (800027c <LedInit+0xb4>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	0052      	lsls	r2, r2, #1
 8000214:	3201      	adds	r2, #1
 8000216:	2101      	movs	r1, #1
 8000218:	4091      	lsls	r1, r2
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	0052      	lsls	r2, r2, #1
 800021e:	2001      	movs	r0, #1
 8000220:	fa00 f202 	lsl.w	r2, r0, r2
 8000224:	430a      	orrs	r2, r1
 8000226:	43d2      	mvns	r2, r2
 8000228:	4611      	mov	r1, r2
 800022a:	4a14      	ldr	r2, [pc, #80]	@ (800027c <LedInit+0xb4>)
 800022c:	400b      	ands	r3, r1
 800022e:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000230:	4b12      	ldr	r3, [pc, #72]	@ (800027c <LedInit+0xb4>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	0052      	lsls	r2, r2, #1
 8000238:	3201      	adds	r2, #1
 800023a:	2101      	movs	r1, #1
 800023c:	4091      	lsls	r1, r2
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	0052      	lsls	r2, r2, #1
 8000242:	2001      	movs	r0, #1
 8000244:	fa00 f202 	lsl.w	r2, r0, r2
 8000248:	430a      	orrs	r2, r1
 800024a:	43d2      	mvns	r2, r2
 800024c:	4611      	mov	r1, r2
 800024e:	4a0b      	ldr	r2, [pc, #44]	@ (800027c <LedInit+0xb4>)
 8000250:	400b      	ands	r3, r1
 8000252:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 8000254:	4b09      	ldr	r3, [pc, #36]	@ (800027c <LedInit+0xb4>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	2101      	movs	r1, #1
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	43d2      	mvns	r2, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a05      	ldr	r2, [pc, #20]	@ (800027c <LedInit+0xb4>)
 8000266:	400b      	ands	r3, r1
 8000268:	6053      	str	r3, [r2, #4]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40023800 	.word	0x40023800
 800027c:	40020c00 	.word	0x40020c00

08000280 <LedOn>:

void LedOn(uint32_t pin) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <LedOn+0x28>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	2101      	movs	r1, #1
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	4611      	mov	r1, r2
 8000296:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <LedOn+0x28>)
 8000298:	430b      	orrs	r3, r1
 800029a:	6153      	str	r3, [r2, #20]
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	40020c00 	.word	0x40020c00

080002ac <LedOff>:

void LedOff(uint32_t pin) {
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	// clear led pin (in ODR)
	LED_GPIO->ODR &= ~BV(pin);
 80002b4:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <LedOff+0x2c>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	2101      	movs	r1, #1
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	fa01 f202 	lsl.w	r2, r1, r2
 80002c0:	43d2      	mvns	r2, r2
 80002c2:	4611      	mov	r1, r2
 80002c4:	4a04      	ldr	r2, [pc, #16]	@ (80002d8 <LedOff+0x2c>)
 80002c6:	400b      	ands	r3, r1
 80002c8:	6153      	str	r3, [r2, #20]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40020c00 	.word	0x40020c00

080002dc <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80002e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <DelayMs+0x44>)
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <DelayMs+0x48>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000328 <DelayMs+0x4c>)
 80002f0:	fba2 2303 	umull	r2, r3, r2, r3
 80002f4:	099b      	lsrs	r3, r3, #6
 80002f6:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	68ba      	ldr	r2, [r7, #8]
 80002fc:	fb02 f303 	mul.w	r3, r2, r3
 8000300:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000302:	bf00      	nop
 8000304:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <DelayMs+0x44>)
 8000306:	685a      	ldr	r2, [r3, #4]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	1ad2      	subs	r2, r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	429a      	cmp	r2, r3
 8000310:	d3f8      	bcc.n	8000304 <DelayMs+0x28>
}
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	e0001000 	.word	0xe0001000
 8000324:	20000000 	.word	0x20000000
 8000328:	10624dd3 	.word	0x10624dd3

0800032c <main>:
#endif

extern int count;

int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08e      	sub	sp, #56	@ 0x38
 8000330:	af00      	add	r7, sp, #0
	char str[50];
	SystemInit();
 8000332:	f000 f953 	bl	80005dc <SystemInit>
	LedInit(LED_RED);
 8000336:	200e      	movs	r0, #14
 8000338:	f7ff ff46 	bl	80001c8 <LedInit>
	LedInit(LED_ORANGE);
 800033c:	200d      	movs	r0, #13
 800033e:	f7ff ff43 	bl	80001c8 <LedInit>
	LedInit(LED_GREEN);
 8000342:	200c      	movs	r0, #12
 8000344:	f7ff ff40 	bl	80001c8 <LedInit>
	LedInit(LED_BLUE);
 8000348:	200f      	movs	r0, #15
 800034a:	f7ff ff3d 	bl	80001c8 <LedInit>
	UartInit(BAUD_9600);
 800034e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000352:	f000 f997 	bl	8000684 <UartInit>
	SwitchInit(SWITCH);
 8000356:	2000      	movs	r0, #0
 8000358:	f000 f8ca 	bl	80004f0 <SwitchInit>
	UartPuts("--------LED_CONTROL-------\r\n");		DelayMs(30);
 800035c:	4844      	ldr	r0, [pc, #272]	@ (8000470 <main+0x144>)
 800035e:	f000 fa01 	bl	8000764 <UartPuts>
 8000362:	201e      	movs	r0, #30
 8000364:	f7ff ffba 	bl	80002dc <DelayMs>
	UartPuts("1. RED LED ON\r\n");					DelayMs(30);
 8000368:	4842      	ldr	r0, [pc, #264]	@ (8000474 <main+0x148>)
 800036a:	f000 f9fb 	bl	8000764 <UartPuts>
 800036e:	201e      	movs	r0, #30
 8000370:	f7ff ffb4 	bl	80002dc <DelayMs>
	UartPuts("2. RED LED OFF\r\n");					DelayMs(30);
 8000374:	4840      	ldr	r0, [pc, #256]	@ (8000478 <main+0x14c>)
 8000376:	f000 f9f5 	bl	8000764 <UartPuts>
 800037a:	201e      	movs	r0, #30
 800037c:	f7ff ffae 	bl	80002dc <DelayMs>
	UartPuts("3. ORANGE LED ON\r\n");				DelayMs(30);
 8000380:	483e      	ldr	r0, [pc, #248]	@ (800047c <main+0x150>)
 8000382:	f000 f9ef 	bl	8000764 <UartPuts>
 8000386:	201e      	movs	r0, #30
 8000388:	f7ff ffa8 	bl	80002dc <DelayMs>
	UartPuts("4. ORANGE LED OFF\r\n");				DelayMs(30);
 800038c:	483c      	ldr	r0, [pc, #240]	@ (8000480 <main+0x154>)
 800038e:	f000 f9e9 	bl	8000764 <UartPuts>
 8000392:	201e      	movs	r0, #30
 8000394:	f7ff ffa2 	bl	80002dc <DelayMs>
	UartPuts("5. GREEN LED ON\r\n");				DelayMs(30);
 8000398:	483a      	ldr	r0, [pc, #232]	@ (8000484 <main+0x158>)
 800039a:	f000 f9e3 	bl	8000764 <UartPuts>
 800039e:	201e      	movs	r0, #30
 80003a0:	f7ff ff9c 	bl	80002dc <DelayMs>
	UartPuts("6. GREEN LED OFF\r\n");				DelayMs(30);
 80003a4:	4838      	ldr	r0, [pc, #224]	@ (8000488 <main+0x15c>)
 80003a6:	f000 f9dd 	bl	8000764 <UartPuts>
 80003aa:	201e      	movs	r0, #30
 80003ac:	f7ff ff96 	bl	80002dc <DelayMs>
	UartPuts("7. BLUE LED ON\r\n");					DelayMs(30);
 80003b0:	4836      	ldr	r0, [pc, #216]	@ (800048c <main+0x160>)
 80003b2:	f000 f9d7 	bl	8000764 <UartPuts>
 80003b6:	201e      	movs	r0, #30
 80003b8:	f7ff ff90 	bl	80002dc <DelayMs>
	UartPuts("8. BLUE LED OFF\r\n");				DelayMs(30);
 80003bc:	4834      	ldr	r0, [pc, #208]	@ (8000490 <main+0x164>)
 80003be:	f000 f9d1 	bl	8000764 <UartPuts>
 80003c2:	201e      	movs	r0, #30
 80003c4:	f7ff ff8a 	bl	80002dc <DelayMs>

	while(1)
	{
		UartGets(str);		DelayMs(30);
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fa42 	bl	8000854 <UartGets>
 80003d0:	201e      	movs	r0, #30
 80003d2:	f7ff ff83 	bl	80002dc <DelayMs>
		if(str[0] == '1')
 80003d6:	793b      	ldrb	r3, [r7, #4]
 80003d8:	2b31      	cmp	r3, #49	@ 0x31
 80003da:	d106      	bne.n	80003ea <main+0xbe>
		{		LedOn(LED_RED);			UartPuts("LED_Red_ON");		}
 80003dc:	200e      	movs	r0, #14
 80003de:	f7ff ff4f 	bl	8000280 <LedOn>
 80003e2:	482c      	ldr	r0, [pc, #176]	@ (8000494 <main+0x168>)
 80003e4:	f000 f9be 	bl	8000764 <UartPuts>
 80003e8:	e008      	b.n	80003fc <main+0xd0>
		else if(str[0] == '2')
 80003ea:	793b      	ldrb	r3, [r7, #4]
 80003ec:	2b32      	cmp	r3, #50	@ 0x32
 80003ee:	d105      	bne.n	80003fc <main+0xd0>
		{		LedOff(LED_RED);		UartPuts("LED_Red_OFF");	}
 80003f0:	200e      	movs	r0, #14
 80003f2:	f7ff ff5b 	bl	80002ac <LedOff>
 80003f6:	4828      	ldr	r0, [pc, #160]	@ (8000498 <main+0x16c>)
 80003f8:	f000 f9b4 	bl	8000764 <UartPuts>
		if(str[0] == '3')
 80003fc:	793b      	ldrb	r3, [r7, #4]
 80003fe:	2b33      	cmp	r3, #51	@ 0x33
 8000400:	d106      	bne.n	8000410 <main+0xe4>
		{		LedOn(LED_ORANGE);		UartPuts("LED_Orange_ON");	}
 8000402:	200d      	movs	r0, #13
 8000404:	f7ff ff3c 	bl	8000280 <LedOn>
 8000408:	4824      	ldr	r0, [pc, #144]	@ (800049c <main+0x170>)
 800040a:	f000 f9ab 	bl	8000764 <UartPuts>
 800040e:	e008      	b.n	8000422 <main+0xf6>
		else if(str[0] == '4')
 8000410:	793b      	ldrb	r3, [r7, #4]
 8000412:	2b34      	cmp	r3, #52	@ 0x34
 8000414:	d105      	bne.n	8000422 <main+0xf6>
		{		LedOff(LED_ORANGE);		UartPuts("LED_Orange_OFF");	}
 8000416:	200d      	movs	r0, #13
 8000418:	f7ff ff48 	bl	80002ac <LedOff>
 800041c:	4820      	ldr	r0, [pc, #128]	@ (80004a0 <main+0x174>)
 800041e:	f000 f9a1 	bl	8000764 <UartPuts>
		if(str[0] == '5')
 8000422:	793b      	ldrb	r3, [r7, #4]
 8000424:	2b35      	cmp	r3, #53	@ 0x35
 8000426:	d106      	bne.n	8000436 <main+0x10a>
		{		LedOn(LED_GREEN);		UartPuts("LED_Green_ON");	}
 8000428:	200c      	movs	r0, #12
 800042a:	f7ff ff29 	bl	8000280 <LedOn>
 800042e:	481d      	ldr	r0, [pc, #116]	@ (80004a4 <main+0x178>)
 8000430:	f000 f998 	bl	8000764 <UartPuts>
 8000434:	e008      	b.n	8000448 <main+0x11c>
		else if(str[0] == '6')
 8000436:	793b      	ldrb	r3, [r7, #4]
 8000438:	2b36      	cmp	r3, #54	@ 0x36
 800043a:	d105      	bne.n	8000448 <main+0x11c>
		{		LedOff(LED_GREEN);		UartPuts("LED_Green_Off");	}
 800043c:	200c      	movs	r0, #12
 800043e:	f7ff ff35 	bl	80002ac <LedOff>
 8000442:	4819      	ldr	r0, [pc, #100]	@ (80004a8 <main+0x17c>)
 8000444:	f000 f98e 	bl	8000764 <UartPuts>
		if(str[0] == '7')
 8000448:	793b      	ldrb	r3, [r7, #4]
 800044a:	2b37      	cmp	r3, #55	@ 0x37
 800044c:	d106      	bne.n	800045c <main+0x130>
		{		LedOn(LED_BLUE);		UartPuts("LED_Blue_ON");	}
 800044e:	200f      	movs	r0, #15
 8000450:	f7ff ff16 	bl	8000280 <LedOn>
 8000454:	4815      	ldr	r0, [pc, #84]	@ (80004ac <main+0x180>)
 8000456:	f000 f985 	bl	8000764 <UartPuts>
 800045a:	e7b5      	b.n	80003c8 <main+0x9c>
		else if(str[0] == '8')
 800045c:	793b      	ldrb	r3, [r7, #4]
 800045e:	2b38      	cmp	r3, #56	@ 0x38
 8000460:	d1b2      	bne.n	80003c8 <main+0x9c>
		{		LedOff(LED_BLUE);		UartPuts("LED_Blue_OFF");	}
 8000462:	200f      	movs	r0, #15
 8000464:	f7ff ff22 	bl	80002ac <LedOff>
 8000468:	4811      	ldr	r0, [pc, #68]	@ (80004b0 <main+0x184>)
 800046a:	f000 f97b 	bl	8000764 <UartPuts>
		UartGets(str);		DelayMs(30);
 800046e:	e7ab      	b.n	80003c8 <main+0x9c>
 8000470:	08000954 	.word	0x08000954
 8000474:	08000974 	.word	0x08000974
 8000478:	08000984 	.word	0x08000984
 800047c:	08000998 	.word	0x08000998
 8000480:	080009ac 	.word	0x080009ac
 8000484:	080009c0 	.word	0x080009c0
 8000488:	080009d4 	.word	0x080009d4
 800048c:	080009e8 	.word	0x080009e8
 8000490:	080009fc 	.word	0x080009fc
 8000494:	08000a10 	.word	0x08000a10
 8000498:	08000a1c 	.word	0x08000a1c
 800049c:	08000a28 	.word	0x08000a28
 80004a0:	08000a38 	.word	0x08000a38
 80004a4:	08000a48 	.word	0x08000a48
 80004a8:	08000a58 	.word	0x08000a58
 80004ac:	08000a68 	.word	0x08000a68
 80004b0:	08000a74 	.word	0x08000a74

080004b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	db0b      	blt.n	80004de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	f003 021f 	and.w	r2, r3, #31
 80004cc:	4907      	ldr	r1, [pc, #28]	@ (80004ec <__NVIC_EnableIRQ+0x38>)
 80004ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d2:	095b      	lsrs	r3, r3, #5
 80004d4:	2001      	movs	r0, #1
 80004d6:	fa00 f202 	lsl.w	r2, r0, r2
 80004da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000e100 	.word	0xe000e100

080004f0 <SwitchInit>:
#include "switch.h"

int count = 0;


void SwitchInit(uint32_t pin) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 80004f8:	4b2a      	ldr	r3, [pc, #168]	@ (80005a4 <SwitchInit+0xb4>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fc:	4a29      	ldr	r2, [pc, #164]	@ (80005a4 <SwitchInit+0xb4>)
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	6313      	str	r3, [r2, #48]	@ 0x30
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000504:	4b28      	ldr	r3, [pc, #160]	@ (80005a8 <SwitchInit+0xb8>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	0052      	lsls	r2, r2, #1
 800050c:	3201      	adds	r2, #1
 800050e:	2101      	movs	r1, #1
 8000510:	4091      	lsls	r1, r2
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	0052      	lsls	r2, r2, #1
 8000516:	2001      	movs	r0, #1
 8000518:	fa00 f202 	lsl.w	r2, r0, r2
 800051c:	430a      	orrs	r2, r1
 800051e:	43d2      	mvns	r2, r2
 8000520:	4611      	mov	r1, r2
 8000522:	4a21      	ldr	r2, [pc, #132]	@ (80005a8 <SwitchInit+0xb8>)
 8000524:	400b      	ands	r3, r1
 8000526:	6013      	str	r3, [r2, #0]
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000528:	4b1f      	ldr	r3, [pc, #124]	@ (80005a8 <SwitchInit+0xb8>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	0052      	lsls	r2, r2, #1
 8000530:	3201      	adds	r2, #1
 8000532:	2101      	movs	r1, #1
 8000534:	4091      	lsls	r1, r2
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	0052      	lsls	r2, r2, #1
 800053a:	2001      	movs	r0, #1
 800053c:	fa00 f202 	lsl.w	r2, r0, r2
 8000540:	430a      	orrs	r2, r1
 8000542:	43d2      	mvns	r2, r2
 8000544:	4611      	mov	r1, r2
 8000546:	4a18      	ldr	r2, [pc, #96]	@ (80005a8 <SwitchInit+0xb8>)
 8000548:	400b      	ands	r3, r1
 800054a:	6093      	str	r3, [r2, #8]
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800054c:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <SwitchInit+0xb8>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	0052      	lsls	r2, r2, #1
 8000554:	3201      	adds	r2, #1
 8000556:	2101      	movs	r1, #1
 8000558:	4091      	lsls	r1, r2
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	0052      	lsls	r2, r2, #1
 800055e:	2001      	movs	r0, #1
 8000560:	fa00 f202 	lsl.w	r2, r0, r2
 8000564:	430a      	orrs	r2, r1
 8000566:	43d2      	mvns	r2, r2
 8000568:	4611      	mov	r1, r2
 800056a:	4a0f      	ldr	r2, [pc, #60]	@ (80005a8 <SwitchInit+0xb8>)
 800056c:	400b      	ands	r3, r1
 800056e:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= BV(SWITCH);
 8000570:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <SwitchInit+0xbc>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	4a0d      	ldr	r2, [pc, #52]	@ (80005ac <SwitchInit+0xbc>)
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= BV(SWITCH);
 800057c:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <SwitchInit+0xbc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <SwitchInit+0xbc>)
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6013      	str	r3, [r2, #0]
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 8000588:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <SwitchInit+0xc0>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	4a08      	ldr	r2, [pc, #32]	@ (80005b0 <SwitchInit+0xc0>)
 800058e:	f023 030f 	bic.w	r3, r3, #15
 8000592:	6093      	str	r3, [r2, #8]
	//NVIC->ISER[0] |= BV(EXTI0_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000594:	2006      	movs	r0, #6
 8000596:	f7ff ff8d 	bl	80004b4 <__NVIC_EnableIRQ>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020000 	.word	0x40020000
 80005ac:	40013c00 	.word	0x40013c00
 80005b0:	40013800 	.word	0x40013800

080005b4 <EXTI0_IRQHandler>:
}

volatile int exti0_flag = 0;

void EXTI0_IRQHandler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	EXTI->PR |= BV(SWITCH);
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <EXTI0_IRQHandler+0x20>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a05      	ldr	r2, [pc, #20]	@ (80005d4 <EXTI0_IRQHandler+0x20>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6153      	str	r3, [r2, #20]
	exti0_flag = 1;
 80005c4:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <EXTI0_IRQHandler+0x24>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	601a      	str	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40013c00 	.word	0x40013c00
 80005d8:	20000020 	.word	0x20000020

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  DWT_Init();
 80005e0:	f000 f802 	bl	80005e8 <DWT_Init>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80005ec:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <DWT_Init+0x58>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	4a13      	ldr	r2, [pc, #76]	@ (8000640 <DWT_Init+0x58>)
 80005f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005f6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <DWT_Init+0x58>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4a10      	ldr	r2, [pc, #64]	@ (8000640 <DWT_Init+0x58>)
 80005fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000602:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <DWT_Init+0x5c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a0e      	ldr	r2, [pc, #56]	@ (8000644 <DWT_Init+0x5c>)
 800060a:	f023 0301 	bic.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <DWT_Init+0x5c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a0b      	ldr	r2, [pc, #44]	@ (8000644 <DWT_Init+0x5c>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800061c:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <DWT_Init+0x5c>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000622:	bf00      	nop
    __ASM volatile ("NOP");
 8000624:	bf00      	nop
    __ASM volatile ("NOP");
 8000626:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <DWT_Init+0x5c>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf0c      	ite	eq
 8000630:	2301      	moveq	r3, #1
 8000632:	2300      	movne	r3, #0
 8000634:	b2db      	uxtb	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000edf0 	.word	0xe000edf0
 8000644:	e0001000 	.word	0xe0001000

08000648 <__NVIC_EnableIRQ>:
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	2b00      	cmp	r3, #0
 8000658:	db0b      	blt.n	8000672 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f003 021f 	and.w	r2, r3, #31
 8000660:	4907      	ldr	r1, [pc, #28]	@ (8000680 <__NVIC_EnableIRQ+0x38>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	095b      	lsrs	r3, r3, #5
 8000668:	2001      	movs	r0, #1
 800066a:	fa00 f202 	lsl.w	r2, r0, r2
 800066e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000e100 	.word	0xe000e100

08000684 <UartInit>:
#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 800068c:	4b32      	ldr	r3, [pc, #200]	@ (8000758 <UartInit+0xd4>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000690:	4a31      	ldr	r2, [pc, #196]	@ (8000758 <UartInit+0xd4>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000698:	4b30      	ldr	r3, [pc, #192]	@ (800075c <UartInit+0xd8>)
 800069a:	6a1b      	ldr	r3, [r3, #32]
 800069c:	4a2f      	ldr	r2, [pc, #188]	@ (800075c <UartInit+0xd8>)
 800069e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80006a2:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 80006a4:	4b2d      	ldr	r3, [pc, #180]	@ (800075c <UartInit+0xd8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a2c      	ldr	r2, [pc, #176]	@ (800075c <UartInit+0xd8>)
 80006aa:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80006ae:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 80006b0:	4b2a      	ldr	r3, [pc, #168]	@ (800075c <UartInit+0xd8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a29      	ldr	r2, [pc, #164]	@ (800075c <UartInit+0xd8>)
 80006b6:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80006ba:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80006bc:	4b27      	ldr	r3, [pc, #156]	@ (800075c <UartInit+0xd8>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	4a26      	ldr	r2, [pc, #152]	@ (800075c <UartInit+0xd8>)
 80006c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80006c6:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80006c8:	4b24      	ldr	r3, [pc, #144]	@ (800075c <UartInit+0xd8>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	4a23      	ldr	r2, [pc, #140]	@ (800075c <UartInit+0xd8>)
 80006ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80006d2:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 80006d4:	4b21      	ldr	r3, [pc, #132]	@ (800075c <UartInit+0xd8>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	4a20      	ldr	r2, [pc, #128]	@ (800075c <UartInit+0xd8>)
 80006da:	f023 030c 	bic.w	r3, r3, #12
 80006de:	6053      	str	r3, [r2, #4]

	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 80006e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <UartInit+0xd4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	4a1c      	ldr	r2, [pc, #112]	@ (8000758 <UartInit+0xd4>)
 80006e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ea:	6413      	str	r3, [r2, #64]	@ 0x40
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 80006ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <UartInit+0xdc>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	60da      	str	r2, [r3, #12]
	USART2->CR2 = 0x00000000;
 80006f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <UartInit+0xdc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
	USART2->CR3 = 0x00000000;
 80006f8:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <UartInit+0xdc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
	switch(baud) {
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000704:	d016      	beq.n	8000734 <UartInit+0xb0>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800070c:	d816      	bhi.n	800073c <UartInit+0xb8>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000714:	d004      	beq.n	8000720 <UartInit+0x9c>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800071c:	d005      	beq.n	800072a <UartInit+0xa6>
 800071e:	e00d      	b.n	800073c <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <UartInit+0xdc>)
 8000722:	f240 6283 	movw	r2, #1667	@ 0x683
 8000726:	609a      	str	r2, [r3, #8]
			break;
 8000728:	e008      	b.n	800073c <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <UartInit+0xdc>)
 800072c:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000730:	609a      	str	r2, [r3, #8]
			break;
 8000732:	e003      	b.n	800073c <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <UartInit+0xdc>)
 8000736:	228b      	movs	r2, #139	@ 0x8b
 8000738:	609a      	str	r2, [r3, #8]
			break;
 800073a:	bf00      	nop
	}
	NVIC_EnableIRQ(USART2_IRQn);
 800073c:	2026      	movs	r0, #38	@ 0x26
 800073e:	f7ff ff83 	bl	8000648 <__NVIC_EnableIRQ>
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000742:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <UartInit+0xdc>)
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	4a06      	ldr	r2, [pc, #24]	@ (8000760 <UartInit+0xdc>)
 8000748:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800074c:	60d3      	str	r3, [r2, #12]
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40020000 	.word	0x40020000
 8000760:	40004400 	.word	0x40004400

08000764 <UartPuts>:

char *tx_string;
int tx_index = 0;
int tx_complete = 0;

void UartPuts(char str1[]) {
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	tx_string = str1;
 800076c:	4a0f      	ldr	r2, [pc, #60]	@ (80007ac <UartPuts+0x48>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]
	tx_index = 0;
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <UartPuts+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
	USART2->DR = tx_string[tx_index];
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <UartPuts+0x48>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <UartPuts+0x4c>)
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	4413      	add	r3, r2
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <UartPuts+0x50>)
 8000786:	605a      	str	r2, [r3, #4]
	tx_index++;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <UartPuts+0x4c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	4a08      	ldr	r2, [pc, #32]	@ (80007b0 <UartPuts+0x4c>)
 8000790:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= BV(USART_CR1_TXEIE_Pos);
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <UartPuts+0x50>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	4a07      	ldr	r2, [pc, #28]	@ (80007b4 <UartPuts+0x50>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079c:	60d3      	str	r3, [r2, #12]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000024 	.word	0x20000024
 80007b0:	20000028 	.word	0x20000028
 80007b4:	40004400 	.word	0x40004400

080007b8 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
	if((USART2->SR & BV(USART_SR_TXE_Pos)) != 0) {
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <USART2_IRQHandler+0x60>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d021      	beq.n	800080c <USART2_IRQHandler+0x54>
		if(tx_string[tx_index] != '\0') {
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <USART2_IRQHandler+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <USART2_IRQHandler+0x68>)
 80007ce:	6812      	ldr	r2, [r2, #0]
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00d      	beq.n	80007f4 <USART2_IRQHandler+0x3c>
			USART2->DR = tx_string[tx_index];
 80007d8:	4b10      	ldr	r3, [pc, #64]	@ (800081c <USART2_IRQHandler+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a10      	ldr	r2, [pc, #64]	@ (8000820 <USART2_IRQHandler+0x68>)
 80007de:	6812      	ldr	r2, [r2, #0]
 80007e0:	4413      	add	r3, r2
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <USART2_IRQHandler+0x60>)
 80007e6:	605a      	str	r2, [r3, #4]
			tx_index++;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <USART2_IRQHandler+0x68>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000820 <USART2_IRQHandler+0x68>)
 80007f0:	6013      	str	r3, [r2, #0]
			tx_string = NULL;
			tx_complete = 1;
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
		}
	}
}
 80007f2:	e00b      	b.n	800080c <USART2_IRQHandler+0x54>
			tx_string = NULL;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <USART2_IRQHandler+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
			tx_complete = 1;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <USART2_IRQHandler+0x6c>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	601a      	str	r2, [r3, #0]
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <USART2_IRQHandler+0x60>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	4a04      	ldr	r2, [pc, #16]	@ (8000818 <USART2_IRQHandler+0x60>)
 8000806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800080a:	60d3      	str	r3, [r2, #12]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40004400 	.word	0x40004400
 800081c:	20000024 	.word	0x20000024
 8000820:	20000028 	.word	0x20000028
 8000824:	2000002c 	.word	0x2000002c

08000828 <UartGetch>:

uint8_t UartGetch(void) {
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 800082e:	bf00      	nop
 8000830:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <UartGetch+0x28>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f003 0320 	and.w	r3, r3, #32
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f9      	beq.n	8000830 <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 800083c:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <UartGetch+0x28>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	71fb      	strb	r3, [r7, #7]
	return ch;
 8000842:	79fb      	ldrb	r3, [r7, #7]
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	40004400 	.word	0x40004400

08000854 <UartGets>:

void UartGets(char str[]) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	int i=0;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 8000860:	f7ff ffe2 	bl	8000828 <UartGetch>
 8000864:	4603      	mov	r3, r0
 8000866:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	7afa      	ldrb	r2, [r7, #11]
 8000870:	701a      	strb	r2, [r3, #0]
		i++;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3301      	adds	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 8000878:	7afb      	ldrb	r3, [r7, #11]
 800087a:	2b0d      	cmp	r3, #13
 800087c:	d1f0      	bne.n	8000860 <UartGets+0xc>
	str[i] = '\n';
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	220a      	movs	r2, #10
 8000886:	701a      	strb	r2, [r3, #0]
	i++;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3301      	adds	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	4413      	add	r3, r2
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a0:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a4:	f7ff fe9a 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	@ (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	@ (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	@ (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	@ (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ce:	f000 f811 	bl	80008f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d2:	f7ff fd2b 	bl	800032c <main>

080008d6 <LoopForever>:

LoopForever:
  b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   r0, =_estack
 80008d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80008e4:	08000a8c 	.word	0x08000a8c
  ldr r2, =_sbss
 80008e8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80008ec:	20000030 	.word	0x20000030

080008f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC_IRQHandler>
	...

080008f4 <__libc_init_array>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	4d0d      	ldr	r5, [pc, #52]	@ (800092c <__libc_init_array+0x38>)
 80008f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000930 <__libc_init_array+0x3c>)
 80008fa:	1b64      	subs	r4, r4, r5
 80008fc:	10a4      	asrs	r4, r4, #2
 80008fe:	2600      	movs	r6, #0
 8000900:	42a6      	cmp	r6, r4
 8000902:	d109      	bne.n	8000918 <__libc_init_array+0x24>
 8000904:	4d0b      	ldr	r5, [pc, #44]	@ (8000934 <__libc_init_array+0x40>)
 8000906:	4c0c      	ldr	r4, [pc, #48]	@ (8000938 <__libc_init_array+0x44>)
 8000908:	f000 f818 	bl	800093c <_init>
 800090c:	1b64      	subs	r4, r4, r5
 800090e:	10a4      	asrs	r4, r4, #2
 8000910:	2600      	movs	r6, #0
 8000912:	42a6      	cmp	r6, r4
 8000914:	d105      	bne.n	8000922 <__libc_init_array+0x2e>
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f855 3b04 	ldr.w	r3, [r5], #4
 800091c:	4798      	blx	r3
 800091e:	3601      	adds	r6, #1
 8000920:	e7ee      	b.n	8000900 <__libc_init_array+0xc>
 8000922:	f855 3b04 	ldr.w	r3, [r5], #4
 8000926:	4798      	blx	r3
 8000928:	3601      	adds	r6, #1
 800092a:	e7f2      	b.n	8000912 <__libc_init_array+0x1e>
 800092c:	08000a84 	.word	0x08000a84
 8000930:	08000a84 	.word	0x08000a84
 8000934:	08000a84 	.word	0x08000a84
 8000938:	08000a88 	.word	0x08000a88

0800093c <_init>:
 800093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093e:	bf00      	nop
 8000940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000942:	bc08      	pop	{r3}
 8000944:	469e      	mov	lr, r3
 8000946:	4770      	bx	lr

08000948 <_fini>:
 8000948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094a:	bf00      	nop
 800094c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800094e:	bc08      	pop	{r3}
 8000950:	469e      	mov	lr, r3
 8000952:	4770      	bx	lr
