
lcd_shift.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000478  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000600  08000600  00001600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000628  08000628  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000628  08000628  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000628  08000628  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000628  08000628  00001628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800062c  0800062c  0000162c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000630  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000dd9  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000426  00000000  00000000  00002e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  00003238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008a  00000000  00000000  00003308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018042  00000000  00000000  00003392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000104c  00000000  00000000  0001b3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b909  00000000  00000000  0001c420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a7d29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001f4  00000000  00000000  000a7d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a7f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005d  00000000  00000000  000a7f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080005e8 	.word	0x080005e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080005e8 	.word	0x080005e8

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <LcdBusyWait>:
 *      Author: sunbeam
 */

#include "lcd.h"

void LcdBusyWait(void) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
	uint32_t state;
	LCD_DATA_GPIO->MODER &= ~(BV(LCD_BF*2) | BV(LCD_BF*2+1));
 800021e:	4b10      	ldr	r3, [pc, #64]	@ (8000260 <LcdBusyWait+0x48>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a0f      	ldr	r2, [pc, #60]	@ (8000260 <LcdBusyWait+0x48>)
 8000224:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000228:	6013      	str	r3, [r2, #0]
	LCD_CTRL_GPIO->BSRR = (BV(LCD_BF*2) | BV(LCD_BF*2+1));
 800022a:	4b0d      	ldr	r3, [pc, #52]	@ (8000260 <LcdBusyWait+0x48>)
 800022c:	22c0      	movs	r2, #192	@ 0xc0
 800022e:	619a      	str	r2, [r3, #24]

	do {
		state = LCD_DATA_GPIO->IDR;
 8000230:	4b0b      	ldr	r3, [pc, #44]	@ (8000260 <LcdBusyWait+0x48>)
 8000232:	691b      	ldr	r3, [r3, #16]
 8000234:	607b      	str	r3, [r7, #4]
	}while ((state & BV(LCD_BF))!=0);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f003 0308 	and.w	r3, r3, #8
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1f7      	bne.n	8000230 <LcdBusyWait+0x18>

	LCD_CTRL_GPIO->BSRR = BV(LCD_RW_CLR)|BV(LCD_EN_CLR);
 8000240:	4b07      	ldr	r3, [pc, #28]	@ (8000260 <LcdBusyWait+0x48>)
 8000242:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000246:	619a      	str	r2, [r3, #24]
	LCD_DATA_GPIO->MODER |= BV(LCD_BF*2);
 8000248:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <LcdBusyWait+0x48>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a04      	ldr	r2, [pc, #16]	@ (8000260 <LcdBusyWait+0x48>)
 800024e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000252:	6013      	str	r3, [r2, #0]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	40020c00 	.word	0x40020c00

08000264 <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t val) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	460a      	mov	r2, r1
 800026e:	71fb      	strb	r3, [r7, #7]
 8000270:	4613      	mov	r3, r2
 8000272:	71bb      	strb	r3, [r7, #6]

	if(rs==LCD_CMD)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d104      	bne.n	8000284 <LcdWriteNibble+0x20>
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR)|BV(LCD_RW_CLR);
 800027a:	4b11      	ldr	r3, [pc, #68]	@ (80002c0 <LcdWriteNibble+0x5c>)
 800027c:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8000280:	619a      	str	r2, [r3, #24]
 8000282:	e002      	b.n	800028a <LcdWriteNibble+0x26>
	else
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS) | BV(LCD_RW_CLR);
 8000284:	4b0e      	ldr	r3, [pc, #56]	@ (80002c0 <LcdWriteNibble+0x5c>)
 8000286:	4a0f      	ldr	r2, [pc, #60]	@ (80002c4 <LcdWriteNibble+0x60>)
 8000288:	619a      	str	r2, [r3, #24]

	LCD_DATA_GPIO->ODR &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 800028a:	4b0d      	ldr	r3, [pc, #52]	@ (80002c0 <LcdWriteNibble+0x5c>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	4a0c      	ldr	r2, [pc, #48]	@ (80002c0 <LcdWriteNibble+0x5c>)
 8000290:	f023 030f 	bic.w	r3, r3, #15
 8000294:	6153      	str	r3, [r2, #20]
	LCD_DATA_GPIO->ODR |= val << LCD_D4;
 8000296:	4b0a      	ldr	r3, [pc, #40]	@ (80002c0 <LcdWriteNibble+0x5c>)
 8000298:	695a      	ldr	r2, [r3, #20]
 800029a:	79bb      	ldrb	r3, [r7, #6]
 800029c:	4908      	ldr	r1, [pc, #32]	@ (80002c0 <LcdWriteNibble+0x5c>)
 800029e:	4313      	orrs	r3, r2
 80002a0:	614b      	str	r3, [r1, #20]

	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
 80002a2:	4b07      	ldr	r3, [pc, #28]	@ (80002c0 <LcdWriteNibble+0x5c>)
 80002a4:	2280      	movs	r2, #128	@ 0x80
 80002a6:	619a      	str	r2, [r3, #24]
	DelayMs(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f7ff ff8d 	bl	80001c8 <DelayMs>
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN_CLR);
 80002ae:	4b04      	ldr	r3, [pc, #16]	@ (80002c0 <LcdWriteNibble+0x5c>)
 80002b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80002b4:	619a      	str	r2, [r3, #24]

}
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40020c00 	.word	0x40020c00
 80002c4:	00400020 	.word	0x00400020

080002c8 <LcdWrite>:


void LcdWrite(uint8_t rs, uint8_t val) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	460a      	mov	r2, r1
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	4613      	mov	r3, r2
 80002d6:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val >> 4, low = val & 0x0F;
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	091b      	lsrs	r3, r3, #4
 80002dc:	73fb      	strb	r3, [r7, #15]
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	f003 030f 	and.w	r3, r3, #15
 80002e4:	73bb      	strb	r3, [r7, #14]
	LcdWriteNibble(rs, high);
 80002e6:	7bfa      	ldrb	r2, [r7, #15]
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	4611      	mov	r1, r2
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ffb9 	bl	8000264 <LcdWriteNibble>
	LcdWriteNibble(rs, low);
 80002f2:	7bba      	ldrb	r2, [r7, #14]
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	4611      	mov	r1, r2
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ffb3 	bl	8000264 <LcdWriteNibble>
	LcdBusyWait();
 80002fe:	f7ff ff8b 	bl	8000218 <LcdBusyWait>
	DelayMs(3);
 8000302:	2003      	movs	r0, #3
 8000304:	f7ff ff60 	bl	80001c8 <DelayMs>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <LcdInit>:

void LcdInit(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	DelayMs(50);
 8000314:	2032      	movs	r0, #50	@ 0x32
 8000316:	f7ff ff57 	bl	80001c8 <DelayMs>
	RCC->AHB1ENR |= BV(LCD_DATA_GPIO_EN);
 800031a:	4b34      	ldr	r3, [pc, #208]	@ (80003ec <LcdInit+0xdc>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031e:	4a33      	ldr	r2, [pc, #204]	@ (80003ec <LcdInit+0xdc>)
 8000320:	f043 0308 	orr.w	r3, r3, #8
 8000324:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= BV(LCD_CTRL_GPIO_EN);
 8000326:	4b31      	ldr	r3, [pc, #196]	@ (80003ec <LcdInit+0xdc>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032a:	4a30      	ldr	r2, [pc, #192]	@ (80003ec <LcdInit+0xdc>)
 800032c:	f043 0308 	orr.w	r3, r3, #8
 8000330:	6313      	str	r3, [r2, #48]	@ 0x30

	LCD_DATA_GPIO->MODER &= ~(BV(LCD_D7*2+1) | BV(LCD_D6*2+1) | BV(LCD_D5*2+1) | BV(LCD_D4*2+1));
 8000332:	4b2f      	ldr	r3, [pc, #188]	@ (80003f0 <LcdInit+0xe0>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a2e      	ldr	r2, [pc, #184]	@ (80003f0 <LcdInit+0xe0>)
 8000338:	f023 03aa 	bic.w	r3, r3, #170	@ 0xaa
 800033c:	6013      	str	r3, [r2, #0]
	LCD_DATA_GPIO->MODER |= BV(LCD_D7*2) | BV(LCD_D6*2) | BV(LCD_D5*2) | BV(LCD_D4*2);
 800033e:	4b2c      	ldr	r3, [pc, #176]	@ (80003f0 <LcdInit+0xe0>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a2b      	ldr	r2, [pc, #172]	@ (80003f0 <LcdInit+0xe0>)
 8000344:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000348:	6013      	str	r3, [r2, #0]
	LCD_DATA_GPIO->OSPEEDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2+1) | BV(LCD_D6*2) | BV(LCD_D5*2+1) | BV(LCD_D5*2) | BV(LCD_D4*2+1) | BV(LCD_D4*2));
 800034a:	4b29      	ldr	r3, [pc, #164]	@ (80003f0 <LcdInit+0xe0>)
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	4a28      	ldr	r2, [pc, #160]	@ (80003f0 <LcdInit+0xe0>)
 8000350:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000354:	6093      	str	r3, [r2, #8]
	LCD_DATA_GPIO->PUPDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2+1) | BV(LCD_D6*2) | BV(LCD_D5*2+1) | BV(LCD_D5*2) | BV(LCD_D4*2+1) | BV(LCD_D4*2));
 8000356:	4b26      	ldr	r3, [pc, #152]	@ (80003f0 <LcdInit+0xe0>)
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	4a25      	ldr	r2, [pc, #148]	@ (80003f0 <LcdInit+0xe0>)
 800035c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000360:	60d3      	str	r3, [r2, #12]
	LCD_DATA_GPIO->OTYPER &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 8000362:	4b23      	ldr	r3, [pc, #140]	@ (80003f0 <LcdInit+0xe0>)
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	4a22      	ldr	r2, [pc, #136]	@ (80003f0 <LcdInit+0xe0>)
 8000368:	f023 030f 	bic.w	r3, r3, #15
 800036c:	6053      	str	r3, [r2, #4]

	LCD_DATA_GPIO->BSRR = (BV(LCD_D7_CLR) | BV(LCD_D6_CLR) | BV(LCD_D5_CLR) | BV(LCD_D4_CLR));
 800036e:	4b20      	ldr	r3, [pc, #128]	@ (80003f0 <LcdInit+0xe0>)
 8000370:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8000374:	619a      	str	r2, [r3, #24]

	LCD_CTRL_GPIO->MODER &= ~(BV(LCD_RS*2+1) | BV(LCD_RW*2+1) | BV(LCD_EN*2+1));
 8000376:	4b1e      	ldr	r3, [pc, #120]	@ (80003f0 <LcdInit+0xe0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a1d      	ldr	r2, [pc, #116]	@ (80003f0 <LcdInit+0xe0>)
 800037c:	f423 4328 	bic.w	r3, r3, #43008	@ 0xa800
 8000380:	6013      	str	r3, [r2, #0]
	LCD_CTRL_GPIO->MODER |= BV(LCD_RS*2) | BV(LCD_RW*2) | BV(LCD_EN*2);
 8000382:	4b1b      	ldr	r3, [pc, #108]	@ (80003f0 <LcdInit+0xe0>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a1a      	ldr	r2, [pc, #104]	@ (80003f0 <LcdInit+0xe0>)
 8000388:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 800038c:	6013      	str	r3, [r2, #0]
	LCD_CTRL_GPIO->OSPEEDR &= ~(BV(LCD_RS*2+1) | BV(LCD_RS*2) | BV(LCD_RW*2+1) | BV(LCD_RW*2) | BV(LCD_EN*2+1) | BV(LCD_EN*2));
 800038e:	4b18      	ldr	r3, [pc, #96]	@ (80003f0 <LcdInit+0xe0>)
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	4a17      	ldr	r2, [pc, #92]	@ (80003f0 <LcdInit+0xe0>)
 8000394:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000398:	6093      	str	r3, [r2, #8]
	LCD_CTRL_GPIO->PUPDR &= ~(BV(LCD_RS*2+1) | BV(LCD_RS*2) | BV(LCD_RW*2+1) | BV(LCD_RW*2) | BV(LCD_EN*2+1) | BV(LCD_EN*2));
 800039a:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <LcdInit+0xe0>)
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	4a14      	ldr	r2, [pc, #80]	@ (80003f0 <LcdInit+0xe0>)
 80003a0:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80003a4:	60d3      	str	r3, [r2, #12]
	LCD_CTRL_GPIO->OTYPER &= ~(BV(LCD_RS) | BV(LCD_RW) | BV(LCD_EN));
 80003a6:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <LcdInit+0xe0>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	4a11      	ldr	r2, [pc, #68]	@ (80003f0 <LcdInit+0xe0>)
 80003ac:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80003b0:	6053      	str	r3, [r2, #4]

	LCD_CTRL_GPIO->BSRR = (BV(LCD_RS_CLR) | BV(LCD_RW_CLR) | BV(LCD_EN_CLR));
 80003b2:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <LcdInit+0xe0>)
 80003b4:	f44f 0260 	mov.w	r2, #14680064	@ 0xe00000
 80003b8:	619a      	str	r2, [r3, #24]

	DelayMs(200);
 80003ba:	20c8      	movs	r0, #200	@ 0xc8
 80003bc:	f7ff ff04 	bl	80001c8 <DelayMs>
	LcdWrite(LCD_CMD, LCD_FN_SET);
 80003c0:	2128      	movs	r1, #40	@ 0x28
 80003c2:	2000      	movs	r0, #0
 80003c4:	f7ff ff80 	bl	80002c8 <LcdWrite>
	LcdWrite(LCD_CMD, LCD_DISP_ON);
 80003c8:	210f      	movs	r1, #15
 80003ca:	2000      	movs	r0, #0
 80003cc:	f7ff ff7c 	bl	80002c8 <LcdWrite>
	LcdWrite(LCD_CMD, LCD_ENTRY_MODE);
 80003d0:	2106      	movs	r1, #6
 80003d2:	2000      	movs	r0, #0
 80003d4:	f7ff ff78 	bl	80002c8 <LcdWrite>
	LcdWrite(LCD_CMD, LCD_CLEAR);
 80003d8:	2101      	movs	r1, #1
 80003da:	2000      	movs	r0, #0
 80003dc:	f7ff ff74 	bl	80002c8 <LcdWrite>

	DelayMs(200);
 80003e0:	20c8      	movs	r0, #200	@ 0xc8
 80003e2:	f7ff fef1 	bl	80001c8 <DelayMs>
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40023800 	.word	0x40023800
 80003f0:	40020c00 	.word	0x40020c00

080003f4 <LcdPuts>:

void LcdPuts(uint8_t line, char str[]) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	6039      	str	r1, [r7, #0]
 80003fe:	71fb      	strb	r3, [r7, #7]
	int i;
	LcdWrite(LCD_CMD, line);
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	4619      	mov	r1, r3
 8000404:	2000      	movs	r0, #0
 8000406:	f7ff ff5f 	bl	80002c8 <LcdWrite>
	for(i=0; str[i]!='\0'; i++)
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
 800040e:	e00a      	b.n	8000426 <LcdPuts+0x32>
		LcdWrite(LCD_DATA, str[i]);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	683a      	ldr	r2, [r7, #0]
 8000414:	4413      	add	r3, r2
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4619      	mov	r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	f7ff ff54 	bl	80002c8 <LcdWrite>
	for(i=0; str[i]!='\0'; i++)
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	3301      	adds	r3, #1
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	683a      	ldr	r2, [r7, #0]
 800042a:	4413      	add	r3, r2
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d1ee      	bne.n	8000410 <LcdPuts+0x1c>
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000444:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <DelayMs+0x44>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <DelayMs+0x48>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <DelayMs+0x4c>)
 8000450:	fba2 2303 	umull	r2, r3, r2, r3
 8000454:	099b      	lsrs	r3, r3, #6
 8000456:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	fb02 f303 	mul.w	r3, r2, r3
 8000460:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000462:	bf00      	nop
 8000464:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <DelayMs+0x44>)
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	1ad2      	subs	r2, r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	429a      	cmp	r2, r3
 8000470:	d3f8      	bcc.n	8000464 <DelayMs+0x28>
}
 8000472:	bf00      	nop
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	e0001000 	.word	0xe0001000
 8000484:	20000000 	.word	0x20000000
 8000488:	10624dd3 	.word	0x10624dd3

0800048c <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
	SystemInit();
 8000492:	f000 f825 	bl	80004e0 <SystemInit>
	LcdInit();
 8000496:	f7ff ff3b 	bl	8000310 <LcdInit>
	LcdPuts(LCD_LINE1, "KAUSHAL KR. SONI");
 800049a:	490f      	ldr	r1, [pc, #60]	@ (80004d8 <main+0x4c>)
 800049c:	2080      	movs	r0, #128	@ 0x80
 800049e:	f7ff ffa9 	bl	80003f4 <LcdPuts>
	LcdPuts(LCD_LINE2, " DESD @ SUNBEAM ");
 80004a2:	490e      	ldr	r1, [pc, #56]	@ (80004dc <main+0x50>)
 80004a4:	20c0      	movs	r0, #192	@ 0xc0
 80004a6:	f7ff ffa5 	bl	80003f4 <LcdPuts>

	int i=1;
 80004aa:	2301      	movs	r3, #1
 80004ac:	607b      	str	r3, [r7, #4]
	while(i<=16)
 80004ae:	e00a      	b.n	80004c6 <main+0x3a>
	{

		LcdWrite(LCD_CMD, LCD_LEFT_SHIFT);
 80004b0:	2118      	movs	r1, #24
 80004b2:	2000      	movs	r0, #0
 80004b4:	f7ff ff08 	bl	80002c8 <LcdWrite>
				DelayMs(1000);
 80004b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004bc:	f7ff ffbe 	bl	800043c <DelayMs>
				i++;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	3301      	adds	r3, #1
 80004c4:	607b      	str	r3, [r7, #4]
	while(i<=16)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2b10      	cmp	r3, #16
 80004ca:	ddf1      	ble.n	80004b0 <main+0x24>
	}
	return 0;
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	08000600 	.word	0x08000600
 80004dc:	08000614 	.word	0x08000614

080004e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  DWT_Init();
 80004e4:	f000 f802 	bl	80004ec <DWT_Init>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004f0:	4b14      	ldr	r3, [pc, #80]	@ (8000544 <DWT_Init+0x58>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	4a13      	ldr	r2, [pc, #76]	@ (8000544 <DWT_Init+0x58>)
 80004f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004fa:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004fc:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <DWT_Init+0x58>)
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	4a10      	ldr	r2, [pc, #64]	@ (8000544 <DWT_Init+0x58>)
 8000502:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000506:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000508:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <DWT_Init+0x5c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <DWT_Init+0x5c>)
 800050e:	f023 0301 	bic.w	r3, r3, #1
 8000512:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000514:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <DWT_Init+0x5c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0b      	ldr	r2, [pc, #44]	@ (8000548 <DWT_Init+0x5c>)
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000520:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <DWT_Init+0x5c>)
 8000522:	2200      	movs	r2, #0
 8000524:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000526:	bf00      	nop
    __ASM volatile ("NOP");
 8000528:	bf00      	nop
    __ASM volatile ("NOP");
 800052a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <DWT_Init+0x5c>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	2b00      	cmp	r3, #0
 8000532:	bf0c      	ite	eq
 8000534:	2301      	moveq	r3, #1
 8000536:	2300      	movne	r3, #0
 8000538:	b2db      	uxtb	r3, r3
}
 800053a:	4618      	mov	r0, r3
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	e000edf0 	.word	0xe000edf0
 8000548:	e0001000 	.word	0xe0001000

0800054c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800054c:	480d      	ldr	r0, [pc, #52]	@ (8000584 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800054e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000550:	f7ff ffc6 	bl	80004e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000554:	480c      	ldr	r0, [pc, #48]	@ (8000588 <LoopForever+0x6>)
  ldr r1, =_edata
 8000556:	490d      	ldr	r1, [pc, #52]	@ (800058c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000558:	4a0d      	ldr	r2, [pc, #52]	@ (8000590 <LoopForever+0xe>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800055c:	e002      	b.n	8000564 <LoopCopyDataInit>

0800055e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000562:	3304      	adds	r3, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000568:	d3f9      	bcc.n	800055e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	@ (8000594 <LoopForever+0x12>)
  ldr r4, =_ebss
 800056c:	4c0a      	ldr	r4, [pc, #40]	@ (8000598 <LoopForever+0x16>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000570:	e001      	b.n	8000576 <LoopFillZerobss>

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000574:	3204      	adds	r2, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800057a:	f000 f811 	bl	80005a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057e:	f7ff ff85 	bl	800048c <main>

08000582 <LoopForever>:

LoopForever:
  b LoopForever
 8000582:	e7fe      	b.n	8000582 <LoopForever>
  ldr   r0, =_estack
 8000584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800058c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000590:	08000630 	.word	0x08000630
  ldr r2, =_sbss
 8000594:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000598:	20000020 	.word	0x20000020

0800059c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC_IRQHandler>
	...

080005a0 <__libc_init_array>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	4d0d      	ldr	r5, [pc, #52]	@ (80005d8 <__libc_init_array+0x38>)
 80005a4:	4c0d      	ldr	r4, [pc, #52]	@ (80005dc <__libc_init_array+0x3c>)
 80005a6:	1b64      	subs	r4, r4, r5
 80005a8:	10a4      	asrs	r4, r4, #2
 80005aa:	2600      	movs	r6, #0
 80005ac:	42a6      	cmp	r6, r4
 80005ae:	d109      	bne.n	80005c4 <__libc_init_array+0x24>
 80005b0:	4d0b      	ldr	r5, [pc, #44]	@ (80005e0 <__libc_init_array+0x40>)
 80005b2:	4c0c      	ldr	r4, [pc, #48]	@ (80005e4 <__libc_init_array+0x44>)
 80005b4:	f000 f818 	bl	80005e8 <_init>
 80005b8:	1b64      	subs	r4, r4, r5
 80005ba:	10a4      	asrs	r4, r4, #2
 80005bc:	2600      	movs	r6, #0
 80005be:	42a6      	cmp	r6, r4
 80005c0:	d105      	bne.n	80005ce <__libc_init_array+0x2e>
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c8:	4798      	blx	r3
 80005ca:	3601      	adds	r6, #1
 80005cc:	e7ee      	b.n	80005ac <__libc_init_array+0xc>
 80005ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d2:	4798      	blx	r3
 80005d4:	3601      	adds	r6, #1
 80005d6:	e7f2      	b.n	80005be <__libc_init_array+0x1e>
 80005d8:	08000628 	.word	0x08000628
 80005dc:	08000628 	.word	0x08000628
 80005e0:	08000628 	.word	0x08000628
 80005e4:	0800062c 	.word	0x0800062c

080005e8 <_init>:
 80005e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ea:	bf00      	nop
 80005ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ee:	bc08      	pop	{r3}
 80005f0:	469e      	mov	lr, r3
 80005f2:	4770      	bx	lr

080005f4 <_fini>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	bf00      	nop
 80005f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fa:	bc08      	pop	{r3}
 80005fc:	469e      	mov	lr, r3
 80005fe:	4770      	bx	lr
